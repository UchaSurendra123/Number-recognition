import tensorflow as tf

# Create a dataset of real-time images of handwritten digits
dataset = tf.keras.preprocessing.image_dataset_from_directory(
    "handwritten_digits_dataset",
    labels="inferred",
    label_mode="int",
    batch_size=32,
    image_size=(28, 28),
    shuffle=True,
    seed=42,
)

# Split the dataset into training and testing sets
train_dataset = dataset.take(0.8)
test_dataset = dataset.skip(0.8)

# Create a neural network model
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(10, activation='softmax')
])

# Compile the model
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Train the model
model.fit(train_dataset, epochs=10)

# Evaluate the model on the testing set
test_loss, test_accuracy = model.evaluate(test_dataset)

# Print the test accuracy
print("Test accuracy:", test_accuracy)
